// ==============================
// 1. Import th∆∞ vi·ªán c·∫ßn thi·∫øt
// ==============================
const express = require("express");   // Framework ƒë·ªÉ t·∫°o server
const bodyParser = require("body-parser"); // Gi√∫p ƒë·ªçc d·ªØ li·ªáu JSON t·ª´ request

// ==============================
// 2. Kh·ªüi t·∫°o server
// ==============================
const app = express();
const PORT = process.env.PORT || 3000; // Render s·∫Ω t·ª± g√°n PORT qua bi·∫øn m√¥i tr∆∞·ªùng

// Middleware: cho ph√©p server ƒë·ªçc d·ªØ li·ªáu JSON g·ª≠i l√™n
app.use(bodyParser.json());

// ==============================
// 3. B·ªô nh·ªõ t·∫°m ƒë·ªÉ l∆∞u t√≠n hi·ªáu
// ==============================
// M·ªói khi TradingView g·ª≠i webhook, ta s·∫Ω l∆∞u t√≠n hi·ªáu l·∫°i trong object n√†y
let signals = {
  A: null,
  B: null,
  C: null,
  D: null,
  E: null
};
//================
// C·∫•u h√¨nh bot Telegram
//================

const axios = require('axios');

// H√†m g·ª≠i th√¥ng b√°o Telegram
async function sendTelegramMessage(message) {
  
    const TELEGRAM_BOT_TOKEN = "8234327138:AAE0sOglWD0wIVdwdPwtxo46w3y46K4vMm8"; // bot token
    const CHAT_ID = "5628856618"; // chat_id 

  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  try {
    await axios.post(url, {
      chat_id: TELEGRAM_CHAT_ID,
      text: message,
    });
    console.log("ƒê√£ g·ª≠i th√¥ng b√°o Telegram:", message);
  } catch (error) {
    console.error("L·ªói g·ª≠i Telegram:", error.response ? error.response.data : error.message);
  }
}

// V√≠ d·ª•: g·ªçi h√†m n√†y khi nh·∫≠n t√≠n hi·ªáu h·ª£p l·ªá
// sendTelegramMessage("üöÄ Nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu MUA BTC/USDT!");


// ==============================
// 4. Endpoint ƒë·ªÉ nh·∫≠n webhook
// ==============================
// TradingView s·∫Ω g·ª≠i POST request ƒë·∫øn ƒë·ªãa ch·ªâ n√†y
// V√≠ d·ª•: https://ten-app.onrender.com/webhook
app.post("/webhook", (req, res) => {
  const data = req.body; // D·ªØ li·ªáu JSON m√† TradingView g·ª≠i sang

  // Gi·∫£ s·ª≠ TradingView g·ª≠i {"signal": "A"}
  const signal = data.signal;

  if (!signal) {
    return res.status(400).send("Thi·∫øu tr∆∞·ªùng 'signal' trong JSON");
  }

  // Ghi log ƒë·ªÉ debug
  console.log("Nh·∫≠n t√≠n hi·ªáu:", signal);

  // L∆∞u t√≠n hi·ªáu v√†o b·ªô nh·ªõ
  if (signals.hasOwnProperty(signal)) {
    signals[signal] = new Date(); // Ghi l·∫°i th·ªùi gian nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu
  }

  // Sau khi l∆∞u t√≠n hi·ªáu, ki·ªÉm tra xem ƒëi·ªÅu ki·ªán c√≥ tho·∫£ m√£n kh√¥ng
  checkConditions();

  // Tr·∫£ l·ªùi TradingView ƒë·ªÉ n√≥ bi·∫øt webhook th√†nh c√¥ng
  res.json({ status: "ok", received: signal });
});

// ==============================
// 5. H√†m ki·ªÉm tra ƒëi·ªÅu ki·ªán
// ==============================
// ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ custom logic ri√™ng tu·ª≥ √Ω
function checkConditions() {
  // V√≠ d·ª•: n·∫øu t√≠n hi·ªáu A + B c√πng c√≥ trong v√≤ng 1 ph√∫t th√¨ b√°o
  if (signals.A && signals.B) {
    let diff = Math.abs(signals.A - signals.B); // ch√™nh l·ªách th·ªùi gian (ms)
    if (diff < 60 * 1000) {
      console.log("üî• ƒêi·ªÅu ki·ªán A + B tho·∫£ m√£n! G·ª≠i th√¥ng b√°o ngay.");
      sendTelegramMessage("üöÄ ƒêi·ªÅu ki·ªán tho·∫£ m√£n: T√≠n hi·ªáu A + B c√πng l√∫c!");
      // T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ g·ªçi API Telegram, Discord, Email, Binance...
      resetSignals(["A", "B"]); // reset l·∫°i ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    }
  }

  // V√≠ d·ª• kh√°c: A + B + C ƒë·ªìng th·ªùi trong 2 ph√∫t
  if (signals.A && signals.B && signals.C) {
    let maxTime = Math.max(signals.A, signals.B, signals.C);
    let minTime = Math.min(signals.A, signals.B, signals.C);
    if (maxTime - minTime < 2 * 60 * 1000) {
      console.log("‚ö° ƒêi·ªÅu ki·ªán A + B + C tho·∫£ m√£n!");
      sendTelegramMessage("üöÄ ƒêi·ªÅu ki·ªán tho·∫£ m√£n: A + B + C tho·∫£ m√£n r·ªìi, M√öC!");
      resetSignals(["A", "B", "C"]);
    }
  }

  // V√≠ d·ª•: n·∫øu ch·ªâ c√≥ t√≠n hi·ªáu E th√¨ c≈©ng b√°o ri√™ng
  if (signals.E) {
    console.log("üì¢ Ch·ªâ ri√™ng t√≠n hi·ªáu E xu·∫•t hi·ªán, b√°o ngay!");
    resetSignals(["E"]);
  }
}

// ==============================
// 6. H√†m reset t√≠n hi·ªáu
// ==============================
// Sau khi x·ª≠ l√Ω xong 1 nh√≥m ƒëi·ªÅu ki·ªán, ta xo√° t√≠n hi·ªáu ƒë√≥ ƒëi
function resetSignals(keys) {
  keys.forEach(k => signals[k] = null);
}

// ==============================
// 7. Endpoint test ƒë∆°n gi·∫£n
// ==============================
app.get("/", (req, res) => {
  res.send("Webhook server ƒëang ch·∫°y!");
});

// ==============================
// 8. Kh·ªüi ƒë·ªông server
// ==============================
app.listen(PORT, () => {
  console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
